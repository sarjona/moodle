{"version":3,"sources":["../../src/local/content.js"],"names":["Component","descriptor","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","ACTIVITYTAG","SECTIONTAG","classes","STATEDREADY","ACTIVITY","dettachedCms","dettachedSections","sections","cms","sectionReturn","_indexContents","reactive","supportComponents","isEditing","DispatchActions","element","classList","add","addEventListener","CourseEvents","manualCompletionToggled","_completionHandler","watch","handler","_reloadCm","_refreshSectionNumber","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","detail","dispatch","cmid","completed","target","getElement","id","number","dataset","sectionid","inplace","inplaceeditable","getInplaceEditable","querySelector","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","cmlist","section","listparent","createCm","_createCmItem","bind","_fixOrder","sectionlist","createSection","_createSectionItem","_scanIndex","item","Section","CmItem","selector","index","creationhandler","items","getElements","forEach","unregister","indexed","cmitem","promise","courseActions","refreshModule","then","catch","sectionitem","refreshSection","container","newItem","document","createElement","for","append","get","_reloadSection","neworder","dettachedelements","createMethod","length","innerHTML","remove","itemid","currentitem","children","insertBefore","lastchild","lastChild","contains","dndFakeActivity","removeChild","getElementById","BaseComponent"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'core_courseformat/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\n// Course actions is needed for actions that are not migrated to components.\nimport courseActions from 'core_course/actions';\nimport DispatchActions from 'core_courseformat/local/content/actions';\nimport * as CourseEvents from 'core_course/events';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n            // Formats can override the activity/section tags but a default one is needed to create new elements.\n            ACTIVITYTAG: 'li',\n            SECTIONTAG: 'li',\n        };\n        // Course content classes.\n        this.classes = {\n            STATEDREADY: `stateready`,\n            ACTIVITY: `activity`,\n            SECTION: `section`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n        // The page section return.\n        this.sectionReturn = descriptor.sectionReturn ?? 0;\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * Course content elements could not provide JS Components because the elements HTML is applied\n     * directly from the course actions. To keep internal components updated this module keeps\n     * a list of the active components and mark them as \"indexed\". This way when any action replace\n     * the HTML this component will recreate the components an add any necessary event listener.\n     *\n     * Format plugins can override this method to provide extra logic to the course frontend.\n     *\n     */\n    stateReady() {\n\n        this._indexContents();\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n            // State changes thaty require to reload course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n        ];\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n    }\n\n    /**\n     * Activity manual completion listener.\n     *\n     * @param {Event} event the custom ecent\n     */\n    _completionHandler({detail}) {\n        if (detail === undefined) {\n            return;\n        }\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {details} details the update details\n     * @property {object} details.element the state object\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        // A method to create a fake element to be replaced when the item is ready.\n        const createCm = this._createCmItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn != 0) {\n            return;\n        }\n        const sectionlist = element.sectionlist ?? [];\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    /**\n     * Reindex a content (section or cm) of the course content.\n     *\n     * This method is used internally by _indexContents.\n     *\n     * @param {string} selector the DOM selector to scan\n     * @param {*} index the index attribute to update\n     * @param {*} creationhandler method to create a new indexed element\n     */\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    /**\n     * Reload a course module contents.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the module.\n     *\n     * @param {details} param0 the watcher details\n     * @property {object} param0.element the state object\n     */\n    _reloadCm({element}) {\n        const cmitem = this.getElement(this.selectors.CM, element.id);\n        if (cmitem) {\n            const promise = courseActions.refreshModule(cmitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Reload a course section contents.\n     *\n     * Section HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the section.\n     *\n     * @param {details} param0 the watcher details\n     * @property {object} param0.element the state object\n     */\n    _reloadSection({element}) {\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n        if (sectionitem) {\n            const promise = courseActions.refreshSection(sectionitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Create a new course module item in a section.\n     *\n     * Thos method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} cmid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createCmItem(container, cmid) {\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n        newItem.dataset.for = 'cmitem';\n        newItem.dataset.id = cmid;\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\n        newItem.id = `module-${cmid}`;\n        newItem.classList.add(this.classes.ACTIVITY);\n        container.append(newItem);\n        this._reloadCm({\n            element: this.reactive.get('cm', cmid),\n        });\n        return newItem;\n    }\n\n    /**\n     * Create a new section item.\n     *\n     * This method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} sectionid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createSectionItem(container, sectionid) {\n        const section = this.reactive.get('section', sectionid);\n        const newItem = document.createElement(this.selectors.SECTIONTAG);\n        newItem.dataset.for = 'section';\n        newItem.dataset.id = sectionid;\n        newItem.dataset.number = section.number;\n        // The legacy actions.js requires a specific ID and class to refresh the section.\n        newItem.id = `section-${sectionid}`;\n        newItem.classList.add(this.classes.SECTION);\n        container.append(newItem);\n        this._reloadSection({\n            element: section,\n        });\n        return newItem;\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\n\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"file":"content.min.js"}