{"version":3,"sources":["../src/tree.js"],"names":["define","Ajax","TreeAccessible","Templates","$","NodeTree","id","settingId","label","description","parent","displayed","checked","level","children","prototype","hasChildren","length","isEmpty","Tree","rootNode","view","nodes","accessibleview","document","getElementById","init","ids","nodeids","labels","descriptions","parents","nelements","innerHTML","promises","i","newNode","decodeURIComponent","push","key","hasOwnProperty","display","Promise","all","finally","getAttribute","applyEvent","nodeId","node","elementNode","addEventListener","forEach","nodeChild","initialiseNodes","checkboxElement","event","stopPropagation","preventDefault","setChecked","resolve","reject","parentElement","getElementsByTagName","haschildren","render","then","html","insertAdjacentHTML","fail","ex","window","console","log","setAttribute","childNode","submit","buttonId","button","settingsPresetsForm","parentNode","remove","settingInput","createElement","appendChild","action","call","methodname","args","done","response","tree"],"mappings":"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","sourcesContent":["/**\n * Show the tree of admins presets.\n *\n * @module     tool_admin_presets/tree\n * @package    tool_admin_presets\n * @copyright  2019 Pimenko <contact@pimenko.com>\n * @author     Jordan Kesraoui\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/ajax', 'core/tree', 'core/templates', 'jquery'], (Ajax, TreeAccessible, Templates, $) => {\n\n    /**\n     * NodeTree Object.\n     * @param id {string} Id of the node.\n     * @param settingId {string} Id of the setting.\n     * @param label {string} Label of the setting.\n     * @param description {string} Description of the setting.\n     * @constructor\n     */\n    let NodeTree = function(id, settingId, label, description) {\n        this.id = id;\n        this.settingId = settingId;\n        this.label = label;\n        this.description = description;\n        this.parent = null;\n        this.displayed = false;\n        this.checked = true;\n        this.level = 1;\n        this.children = [];\n    };\n\n\n\n    /**\n     * Return if the node has children or not.\n     *\n     * @return {boolean}\n     */\n    NodeTree.prototype.hasChildren = function() {\n        return this.children.length > 0;\n    };\n\n    /**\n     * Return if the node is empty (without children and is category type).\n     * @return {boolean}\n     */\n    NodeTree.prototype.isEmpty = function() {\n        return this.settingId === 'category' && !this.hasChildren();\n    };\n\n\n    /**\n     * Accessible Tree of settings.\n     *\n     * @param rootNode {string} Element Id of the root of the tree.\n     * @constructor\n     */\n    let Tree = function(rootNode) {\n        this.view = null;\n        this.nodes = [];\n        this.accessibleview = null;\n        this.rootNode = document.getElementById(rootNode);\n    };\n\n\n    /**\n     * Initialise the tree.\n     *\n     * @param ids {array} Array of setting ids.\n     * @param nodeids {array} Array of node ids.\n     * @param labels {array} Array of settings labels.\n     * @param descriptions {array} Arrays of settings descriptions.\n     * @param parents {array} Arrays of setings parents.\n     */\n    Tree.prototype.init = function(ids, nodeids, labels, descriptions, parents) {\n        let nelements = ids.length;\n\n        this.rootNode.innerHTML = \"\";\n        let promises = [];\n        // Add all nodes to the Tree.\n        for (let i = 0; i < nelements; i++) {\n\n            // Create a new node.\n            let newNode = new NodeTree(\n                nodeids[i],\n                ids[i],\n                decodeURIComponent(labels[i]),\n                decodeURIComponent(descriptions[i])\n            );\n\n            this.nodes[newNode.id] = newNode;\n        }\n\n        // Associate parents and children.\n        for (let i = 0; i < nelements; i++) {\n            if (parents[i] === 'root') {\n                this.nodes[nodeids[i]].parent = null;\n            } else {\n                this.nodes[nodeids[i]].parent = this.nodes[parents[i]];\n                this.nodes[parents[i]].children.push(this.nodes[nodeids[i]]);\n            }\n        }\n\n        // Display all parent nodes.\n        for (var key in this.nodes) {\n            if (this.nodes.hasOwnProperty(key)) {\n                if (this.nodes[key].parent === null) {\n                    promises.push(this.display(key));\n                }\n            }\n        }\n\n        // Make the tree accessible.\n        Promise.all(promises).finally(() => {\n            this.accessibleview = new TreeAccessible('#' + this.rootNode.getAttribute('id'));\n        });\n    };\n\n    /**\n     * Apply the events click on the element's node and his checkbox.\n     *\n     * @param nodeId {string} Id of the node.\n     */\n    Tree.prototype.applyEvent = function(nodeId) {\n        let node = this.nodes[nodeId];\n        // If the elements is displayed.\n        if (node.displayed) {\n\n            let elementNode = document.getElementById(nodeId);\n\n            // Display all children node when is the node is clicked.\n            elementNode.addEventListener('focus', () => {\n                if (node.hasChildren()) {\n\n                    let promises = [];\n                    node.children.forEach((nodeChild) => {\n                        promises.push(this.display(nodeChild.id));\n                        //promises.push(this.children[index].display());\n                    });\n\n                    // Make the node accessible.\n                    Promise.all(promises).finally(() => {\n                        this.accessibleview.initialiseNodes($('#' + nodeId));\n                    });\n                }\n            });\n\n\n            // Change the value of mark checked when a click on the checkbox.\n            let checkboxElement = document.getElementById(nodeId + '_checkbox');\n            checkboxElement.addEventListener('click', (event) => {\n                event.stopPropagation();\n                event.preventDefault();\n                this.setChecked(nodeId, !node.checked);\n            });\n\n            // Change the value of mark checked when the enter key is pushed.\n            elementNode.addEventListener('keydown', (event) => {\n                if (event.key === \"Enter\") {\n                    event.stopPropagation();\n                    event.preventDefault();\n                    this.setChecked(nodeId, !node.checked);\n                }\n            });\n        }\n    };\n\n    /**\n     * Display the Node in the DOM (create DOM element).\n     *\n     * @param nodeId {string} Id of the node.\n     * @return {Promise}\n     */\n    Tree.prototype.display = function(nodeId) {\n        return new Promise((resolve, reject) => {\n            let node = this.nodes[nodeId];\n            // If the elements is not yet displayed.\n            if (!node.displayed && !node.isEmpty()) {\n                let parentElement = null;\n                // Take the root node of the tree if the Node hasn't parent.\n                if (node.parent === null) {\n                    parentElement = this.rootNode;\n                } else {\n                    parentElement = document.getElementById(node.parent.id).getElementsByTagName('ul')[0];\n                    this.nodes[nodeId].level = this.nodes[node.parent.id].level + 1;\n                }\n\n                let haschildren = '';\n                if (node.hasChildren()) {\n                    haschildren = 'has-children';\n                }\n                let checked = 'checkbox-unchecked';\n                if (node.checked) {\n                    checked = 'checkbox-checked';\n                }\n\n\n                // Add the new node in the DOM.\n                let newNode = {\n                    \"id\": node.id,\n                    \"level\": node.level,\n                    \"label\": node.label,\n                    \"has_children\" : haschildren,\n                    \"checked\" : checked\n                };\n\n                // Add the node in the DOM.\n                Templates.render('tool_admin_presets/tree_node', newNode)\n                    .then((html) => {\n                        parentElement.insertAdjacentHTML('beforeend', html);\n\n                        // Mark the node displayed.\n                        this.nodes[nodeId].displayed = true;\n\n                        // Apply click event on the element.\n                        this.applyEvent(nodeId);\n\n                        resolve(true);\n                    }).fail(function (ex) {\n                    reject(false);\n                    window.console.log(ex);\n                });\n            } else {\n                resolve(true);\n            }\n        });\n    };\n\n    /**\n     * Set the property checked on the node and his children.\n     *\n     * @param  nodeId {string} Id of the node.\n     * @param checked {boolean} Checking status.\n     */\n    Tree.prototype.setChecked = function(nodeId, checked) {\n        let node = this.nodes[nodeId];\n        this.nodes[nodeId].checked = checked;\n\n        // Change the checkbox apparence.\n        if (node.displayed) {\n            let checkboxElement = document.getElementById(nodeId + '_checkbox');\n            if (checked) {\n                checkboxElement.setAttribute('class', 'checkbox-checked');\n            } else {\n                checkboxElement.setAttribute('class', 'checkbox-unchecked');\n            }\n        }\n\n        // Modify all children.\n        if (node.hasChildren()) {\n            node.children.forEach((childNode) => {\n                this.setChecked(childNode.id, checked);\n            });\n        }\n    };\n\n    /**\n     * Submit the settings to the form.\n     *\n     * @param buttonId {string} Id of submit button element.\n     */\n    Tree.prototype.submit = function(buttonId) {\n        let button = document.getElementById(buttonId);\n\n        // Event on click on the submit button.\n        button.addEventListener('click', () => {\n            let settingsPresetsForm = document.getElementById(buttonId).parentNode;\n\n            // Remove all previous input created.\n            settingsPresetsForm.getElementsByTagName('input').forEach((node) => {\n                if (node.getAttribute('type') === 'hidden') {\n                    node.remove();\n                }\n            });\n\n            // Create all hidden input with nodes checked.\n            for (var key in this.nodes) {\n                if (this.nodes.hasOwnProperty(key)) {\n                    let node = this.nodes[key];\n                    if (node.settingId !== 'category' && node.settingId !== 'page' && node.checked) {\n                        let settingInput = document.createElement('input');\n                        settingInput.setAttribute('type', 'hidden');\n                        settingInput.setAttribute('name', node.settingId);\n                        settingInput.setAttribute('value', '1');\n                        settingsPresetsForm.appendChild(settingInput);\n                    }\n                }\n            }\n        });\n    };\n\n    return {\n        init: (action, id) => {\n            // Call ajax functions to retrieve settings.\n            Ajax.call([{\n                methodname: 'tool_admin_presets_get_settings',\n                args: {\n                    action: action,\n                    id: id\n                }\n            }], true, true)[0].done((response) => {\n                    // Make the tree with settings retrieved.\n                    let tree = new Tree('settings_tree_div');\n                    tree.init(response.ids,\n                        response.nodes,\n                        response.labels,\n                        response.descriptions,\n                        response.parents);\n\n                    // Set the submit event.\n                    tree.submit('id_admin_presets_submit');\n                }\n            );\n        }\n    };\n});\n"],"file":"tree.min.js"}