{"version":3,"sources":["../src/tree.js"],"names":["define","Y","Ajax","Tree","view","nodes","prototype","init","Promise","resolve","use","Y2","YUI2","widget","TreeView","root","getRoot","addNodes","ids","nodeids","labels","descriptions","parents","nelements","length","i","settingId","nodeId","label","decodeURIComponent","description","parent","newNode","HTMLNode","setNodesProperty","highlightState","render","categories","getNodesByProperty","hasChildren","popNode","children","j","subscribe","onEventToggleHighlight","util","Event","on","settingsPresetsForm","document","getElementById","parentNode","hiLit","lang","isNull","log","treeNode","push","settingInput","createElement","setAttribute","appendChild","join","action","id","call","methodname","args","done","response","tree","finally"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope this it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Show the tree of admins presets.\n *\n * @module     tool_admin_presets/tree\n * @package    tool_admin_presets\n * @copyright  2019 Pimenko <contact@pimenko.com>\n * @author     Jordan Kesraoui\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/yui', 'core/ajax'], (Y, Ajax) => {\n\n    let Tree = function() {\n        this.view = null;\n        this.nodes = null;\n    };\n\n    /**\n     * Init the tree.\n     *\n     * @return {Promise} promise\n     */\n    Tree.prototype.init = function() {\n        return new Promise((resolve) => {\n            Y.use('yui2-treeview', (Y2) => {\n                this.view = new Y2.YUI2.widget.TreeView(\"settings_tree_div\");\n                this.nodes = [];\n                this.nodes.root = this.view.getRoot();\n                resolve(true);\n            });\n        });\n    };\n\n    /**\n     * Creates tree branches.\n     *\n     * @param {Array} ids\n     * @param {Array} nodeids\n     * @param {String} labels\n     * @param {String} descriptions\n     * @param {Array} parents\n     * @return {Promise} promise\n     */\n    Tree.prototype.addNodes = function(ids, nodeids, labels, descriptions, parents) {\n        return new Promise((resolve) => {\n            Y.use('yui2-treeview', (Y2) => {\n                let nelements = ids.length;\n                for (let i = 0; i < nelements; i++) {\n\n                    let settingId = ids[i];\n                    let nodeId = nodeids[i];\n                    let label = decodeURIComponent(labels[i]);\n                    let description = decodeURIComponent(descriptions[i]);\n                    let parent = parents[i];\n\n                    let newNode = new Y2.YUI2.widget.HTMLNode(label, this.nodes[parent]);\n\n                    newNode.settingId = settingId;\n                    newNode.setNodesProperty('title', description);\n                    newNode.highlightState = 1;\n\n                    this.nodes[nodeId] = newNode;\n                    resolve(true);\n                }\n            });\n        });\n    };\n\n    /**\n     * Render the tree.\n     */\n    Tree.prototype.render = function() {\n        Y.use('yui2-treeview', (Y2) => {\n            let categories = this.view.getNodesByProperty('settingId', 'category');\n            // Cleaning categories without children.\n            if (categories) {\n                for (let i = 0; i < categories.length; i++) {\n                    if (!categories[i].hasChildren()) {\n                        this.view.popNode(categories[i]);\n                    }\n                }\n            }\n            categories = this.view.getRoot().children;\n            if (categories) {\n                for (let j = 0; j < categories.length; j++) {\n                    if (!categories[j].hasChildren()) {\n                        this.view.popNode(categories[j]);\n                    }\n                }\n            }\n            this.view.setNodesProperty('propagateHighlightUp', true);\n            this.view.setNodesProperty('propagateHighlightDown', true);\n            this.view.subscribe('clickEvent', this.view.onEventToggleHighlight);\n            this.view.render();\n\n            // Listener to create one node for each selected setting.\n            Y2.YUI2.util.Event.on('id_admin_presets_submit', 'click', () => {\n\n                // We need the moodle form to add the checked settings.\n                let settingsPresetsForm = document.getElementById('id_admin_presets_submit').parentNode;\n\n                let hiLit = this.view.getNodesByProperty('highlightState', 1);\n                if (Y2.YUI2.lang.isNull(hiLit)) {\n                    Y2.YUI2.log(\"Nothing selected\");\n\n                } else {\n\n                    // Only for debugging.\n                    let labels = [];\n\n                    for (let i = 0; i < hiLit.length; i++) {\n\n                        let treeNode = hiLit[i];\n\n                        // Only settings not setting categories nor settings pages.\n                        if (treeNode.settingId !== 'category' && treeNode.settingId !== 'page') {\n                            labels.push(treeNode.settingId);\n\n                            // If the node does not exists we add it.\n                            if (!document.getElementById(treeNode.settingId)) {\n\n                                let settingInput = document.createElement('input');\n                                settingInput.setAttribute('type', 'hidden');\n                                settingInput.setAttribute('name', treeNode.settingId);\n                                settingInput.setAttribute('value', '1');\n                                settingsPresetsForm.appendChild(settingInput);\n                            }\n                        }\n                    }\n\n                    Y2.YUI2.log(\"Checked settings:\\n\" + labels.join(\"\\n\"), \"info\");\n                }\n            });\n        });\n    };\n\n    return {\n        init: (action, id) => {\n            // Call ajax functions to retrieve settings.\n            Ajax.call([{\n                methodname: 'tool_admin_presets_get_settings',\n                args: {\n                    action: action,\n                    id: id\n                }\n            }], true, true)[0].done((response) => {\n                    // Make the tree with settings retrieved.\n                    let tree = new Tree();\n                    tree.init().finally(() => {\n                        tree.addNodes(response.ids,\n                            response.nodes,\n                            response.labels,\n                            response.descriptions,\n                            response.parents\n                        ).finally(() => {\n                            tree.render();\n                        });\n                    });\n                }\n            );\n        }\n    };\n});\n"],"file":"tree.min.js"}