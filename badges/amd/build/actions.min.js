define("core_badges/actions",["exports","core_badges/selectors","core/notification","core/prefetch","core/str","core/ajax"],(function(_exports,_selectors,_notification,_prefetch,_str,_ajax){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Various actions on badges - enabling, disabling, etc.
   *
   * @module      core_badges/actions
   * @copyright   2024 Sara Arjona <sara@moodle.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0,_selectors=_interopRequireDefault(_selectors),_notification=_interopRequireDefault(_notification),_ajax=_interopRequireDefault(_ajax);_exports.init=()=>{(0,_prefetch.prefetchStrings)("core_badges",["reviewconfirm"]),(0,_prefetch.prefetchStrings)("core",["confirm","enable"]),registerEventListeners()};const registerEventListeners=()=>{document.addEventListener("click",(event=>{const enableOption=event.target.closest(_selectors.default.actions.enablebadge);enableOption&&(event.preventDefault(),enableBadgeConfirm(enableOption));const disableOption=event.target.closest(_selectors.default.actions.disablebadge);if(disableOption){event.preventDefault();!async function(badgeId){var request={methodname:"core_badges_disable_badges",args:{badgeids:{badgeid:badgeId}}};try{await _ajax.default.call([request])[0],document.location.reload()}catch(error){_notification.default.exception(error)}}(disableOption.getAttribute("data-badgeid"))}}))},enableBadgeConfirm=enableOption=>{const badgeId=enableOption.getAttribute("data-badgeid"),badgeName=enableOption.getAttribute("data-badgename");_notification.default.saveCancelPromise((0,_str.getString)("confirm","core"),(0,_str.getString)("reviewconfirm","core_badges",badgeName),(0,_str.getString)("enable","core")).then((()=>async function(badgeId){var request={methodname:"core_badges_enable_badges",args:{badgeids:{badgeid:badgeId}}};try{await _ajax.default.call([request])[0],document.location.reload()}catch(error){_notification.default.exception(error)}}(badgeId))).catch((()=>{}))}}));

//# sourceMappingURL=actions.min.js.map