{"version":3,"file":"actions.min.js","sources":["../src/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Various actions on badges - enabling, disabling, etc.\n *\n * @module      core_badges/actions\n * @copyright   2024 Sara Arjona <sara@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport selectors from 'core_badges/selectors';\nimport Notification from 'core/notification';\nimport {prefetchStrings} from 'core/prefetch';\nimport {getString} from 'core/str';\nimport Ajax from 'core/ajax';\n\n/**\n * Initialize module\n */\nexport const init = () => {\n    prefetchStrings('core_badges', [\n        'reviewconfirm',\n    ]);\n    prefetchStrings('core', [\n        'confirm',\n        'enable',\n    ]);\n\n    registerEventListeners();\n};\n\n/**\n * Register events for delete preset option in action menu.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', (event) => {\n        const enableOption = event.target.closest(selectors.actions.enablebadge);\n        if (enableOption) {\n            event.preventDefault();\n            enableBadgeConfirm(enableOption);\n        }\n\n        const disableOption = event.target.closest(selectors.actions.disablebadge);\n        if (disableOption) {\n            event.preventDefault();\n            const badgeId = disableOption.getAttribute('data-badgeid');\n            disableBadge(badgeId);\n        }\n    });\n};\n\n/**\n * Show the confirmation modal to enable badge.\n *\n * @param {HTMLElement} enableOption the badge to enable.\n */\nconst enableBadgeConfirm = (enableOption) => {\n    const badgeId = enableOption.getAttribute('data-badgeid');\n    const badgeName = enableOption.getAttribute('data-badgename');\n\n    Notification.saveCancelPromise(\n        getString('confirm', 'core'),\n        getString('reviewconfirm', 'core_badges', badgeName),\n        getString('enable', 'core'),\n    ).then(() => {\n        return enableBadge(badgeId);\n    }).catch(() => {\n        return;\n    });\n};\n\n/**\n * Enable the badge.\n *\n * @param {int} badgeId The id of the badge to enable.\n * @return {promise} Resolved with the result and warnings of enabling a badge.\n */\nasync function enableBadge(badgeId) {\n    var request = {\n        methodname: 'core_badges_enable_badges',\n        args: {\n            badgeids: {\n                badgeid: badgeId,\n            },\n        }\n    };\n    try {\n        await Ajax.call([request])[0];\n        document.location.reload();\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n\n/**\n * Disable the badge.\n *\n * @param {int} badgeId The id of the badge to disable.\n * @return {promise} Resolved with the result and warnings of disabling a badge.\n */\nasync function disableBadge(badgeId) {\n    var request = {\n        methodname: 'core_badges_disable_badges',\n        args: {\n            badgeids: {\n                badgeid: badgeId,\n            },\n        }\n    };\n    try {\n        await Ajax.call([request])[0];\n        document.location.reload();\n    } catch (error) {\n        Notification.exception(error);\n    }\n}\n"],"names":["registerEventListeners","document","addEventListener","event","enableOption","target","closest","selectors","actions","enablebadge","preventDefault","enableBadgeConfirm","disableOption","disablebadge","badgeId","request","methodname","args","badgeids","badgeid","Ajax","call","location","reload","error","exception","disableBadge","getAttribute","badgeName","saveCancelPromise","then","enableBadge","catch"],"mappings":";;;;;;;sOAgCoB,mCACA,cAAe,CAC3B,gDAEY,OAAQ,CACpB,UACA,WAGJA,gCAMEA,uBAAyB,KAC3BC,SAASC,iBAAiB,SAAUC,cAC1BC,aAAeD,MAAME,OAAOC,QAAQC,mBAAUC,QAAQC,aACxDL,eACAD,MAAMO,iBACNC,mBAAmBP,qBAGjBQ,cAAgBT,MAAME,OAAOC,QAAQC,mBAAUC,QAAQK,iBACzDD,cAAe,CACfT,MAAMO,iCAwDUI,aACpBC,QAAU,CACVC,WAAY,6BACZC,KAAM,CACFC,SAAU,CACNC,QAASL,qBAKXM,cAAKC,KAAK,CAACN,UAAU,GAC3Bd,SAASqB,SAASC,SACpB,MAAOC,6BACQC,UAAUD,QAnEnBE,CADgBd,cAAce,aAAa,sBAWjDhB,mBAAsBP,qBAClBU,QAAUV,aAAauB,aAAa,gBACpCC,UAAYxB,aAAauB,aAAa,wCAE/BE,mBACT,kBAAU,UAAW,SACrB,kBAAU,gBAAiB,cAAeD,YAC1C,kBAAU,SAAU,SACtBE,MAAK,mBAagBhB,aACnBC,QAAU,CACVC,WAAY,4BACZC,KAAM,CACFC,SAAU,CACNC,QAASL,qBAKXM,cAAKC,KAAK,CAACN,UAAU,GAC3Bd,SAASqB,SAASC,SACpB,MAAOC,6BACQC,UAAUD,QAzBhBO,CAAYjB,WACpBkB,OAAM"}